#!/usr/bin/python3
import os
import sys
from pprint import pprint
from normal_print import print, println
from colorama import Fore

from RSToken import tokenize
from RSParse import RParser
from RSEnv import createGlobalEnv, REnvironment
from RSValues import NumberVal, NullVal, BooleanVal
from RSRunner import evaluate, eval_program
from RSError import i_error, c_error

sys.setrecursionlimit(1 << 16)
current_version = "А1.2.1"
current_repl_version = "1.1"

def REPL(flags: dict) -> None:
  repl_parser = RParser(flags["lexer"])

  ins_count = 0
  outs_count = 0

  env = createGlobalEnv()
  println(f"\nРепликатор языка Русик {current_version}, Версия Репликатора {current_repl_version}\nВведите `помощь`, `?`, или `help` для получения справки.")
  while (True):
    repl_parser.clear()
    input_src = input(f"{Fore.GREEN}Ввод({ins_count}){Fore.RESET} >> {Fore.YELLOW}")
    print(Fore.RESET)
    if (input_src in ["exit", "quit", "выход", "выйти"]):
      exit()
    elif (input_src in ["help", "?", "помощь"]):
      println(f"Это помощь по репликатору языка Русик версии {current_version}:")
      println("  - Введите `помощь`, `?`, или `help`, для получения справки")
      println("  - Введите `выход`, `выйти`, `quit`, или `exit`, для выхода")
      println("  - Введите `::CLEAR::`, `::CLEAN::`, или `::ОЧИСТ::`, для очистки экрана")
      println("  - Введите код для его выполнения")
    elif (input_src in ["::CLEAN::", "::CLEAR::", "::ОЧИСТ::"]):
      os.system("clear")
    else:
      program = repl_parser.produceAST(input_src, flags["debug"]["ast"])
      res = eval_program(program, env)
      for i in res:
        print(f"\n{Fore.GREEN}Вывод({ins_count}.{outs_count}){Fore.RESET}: {Fore.WHITE}{i}{Fore.RESET}")
        outs_count += 1
      println()
    ins_count += 1
    outs_count = 0

def RunProgram(src: str, flags: dict, print_res: bool = False) -> None:
  program_parser = RParser(flags["lexer"])
  env = createGlobalEnv()

  program = program_parser.produceAST(src, flags["debug"]["ast"])
  res = eval_program(program, env)
  if (print_res): println(f"{Fore.WHITE}{res}{Fore.RESET}")

def parse_flags(flags: list):
  dflags = {"run": "", "file": "", "debug": {"ast": False}, "lexer": []}
  lexer_flags = ["var-decl-dash"]
  pos = 0
  while (pos < len(flags)):
    if (flags[pos] == "-r"):
      dflags["run"] = "repl"
      pos += 1
    elif (flags[pos] == "-f"):
      dflags["run"] = "file"
      dflags["file"] = flags[pos+1]
      pos += 2
    elif (flags[pos] == "-ast"):
      dflags["debug"]["ast"] = True
      pos += 1
    elif (flags[pos][:2] == "-L"):
      c_error(flags[pos][2:] not in lexer_flags, f"Неизвестный флаг лексера `{flags[pos][2:]}`")
      dflags["lexer"].append(flags[pos][2:])
      pos += 1
    else:
      i_error(f"Неизвестный флаг `{flags[pos]}`")
      exit(1)

  return dflags

def main(argc: int, argv: list) -> int:
  flags: dict = parse_flags(argv[1:])

  if (flags["run"] == "repl"):
    REPL(flags)
  elif (flags["run"] == "file"):
    with open(flags["file"], "r") as fl:
      src_code = fl.read()
    RunProgram(src_code, flags, False)
  else:
    i_error("Не дан флаг репликатора/файла")

  return 0

if (__name__ == "__main__"):
  exit(main(len(sys.argv), sys.argv))

